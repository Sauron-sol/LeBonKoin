import { NextRequest, NextResponse } from "next/server";
import { verifyCloudProof } from "@worldcoin/idkit";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { proof, merkle_root, nullifier_hash, verification_level } = body;

    console.log("üîç API - Donn√©es re√ßues:", { proof, merkle_root, nullifier_hash, verification_level });

    // Validation des donn√©es requises
    if (!proof || !merkle_root || !nullifier_hash) {
      return NextResponse.json(
        {
          success: false,
          message: "Donn√©es manquantes: proof, merkle_root et nullifier_hash requis",
        },
        { status: 400 }
      );
    }

    // R√©cup√©rer la configuration depuis les variables d'environnement
    const appId = process.env.NEXT_PUBLIC_WORLD_APP_ID as `app_${string}`;
    const action = "verify"; // Action standard selon la documentation
    
    if (!appId) {
      return NextResponse.json(
        {
          success: false,
          message: "Configuration World ID manquante",
        },
        { status: 500 }
      );
    }

    console.log("üîë V√©rification avec App ID:", appId, "Action:", action);

    // V√©rifier la preuve avec l'API World ID
    // Selon la documentation: verifyCloudProof(proof, app_id, action, signal?)
    const verifyRes = await verifyCloudProof(
      {
        proof,
        merkle_root,
        nullifier_hash,
        verification_level
      },
      appId,
      action
      // Pas de signal pour cette action g√©n√©rique
    );

    console.log("üìã R√©sultat de verifyCloudProof:", verifyRes);

    if (verifyRes.success) {
      console.log("‚úÖ V√©rification World ID r√©ussie !");
      
      // Sauvegarder le nullifier_hash pour √©viter les r√©utilisations
      // TODO: Impl√©menter la sauvegarde en base de donn√©es
      
      return NextResponse.json({
        success: true,
        message: "V√©rification World ID r√©ussie",
        nullifier: nullifier_hash,
        verified: true,
      });
    } else {
      console.log("‚ùå √âchec de la v√©rification:", verifyRes.detail);
      return NextResponse.json(
        {
          success: false,
          message: "√âchec de la v√©rification World ID",
          error: verifyRes.detail || "V√©rification √©chou√©e",
        },
        { status: 400 }
      );
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification World ID:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Erreur serveur lors de la v√©rification",
        error: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 }
    );
  }
} 