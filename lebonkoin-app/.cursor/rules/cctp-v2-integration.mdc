# üí∞ CIRCLE CCTP V2 - PAIEMENTS MULTICHAIN LEBONKOIN

## üéØ OBJECTIF CCTP V2
Permettre aux utilisateurs de LeBonKoin de payer en USDC depuis **n'importe quelle cha√Æne support√©e** avec des transferts **ultra-rapides** (8-20 secondes) via Fast Transfer.

## üìã CHA√éNES SUPPORT√âES CCTP V2

### ‚úÖ Cha√Ænes Obligatoires LeBonKoin
```typescript
// OBLIGATOIRE : Utiliser uniquement les cha√Ænes CCTP V2 support√©es
// R√©f√©rence : https://developers.circle.com/stablecoins/cctp-getting-started

const LEBONKOIN_SUPPORTED_CHAINS = {
  // Fast Transfer (source ET destination) - PRIORIT√â
  ETHEREUM: { id: 1, name: 'ethereum', fastTransfer: true },
  BASE: { id: 8453, name: 'base', fastTransfer: true },        // RECOMMAND√â (frais bas)
  ARBITRUM: { id: 42161, name: 'arbitrum', fastTransfer: true },
  LINEA: { id: 59144, name: 'linea', fastTransfer: true },
  POLYGON: { id: 137, name: 'polygon', fastTransfer: true },
  WORLD_CHAIN: { id: 480, name: 'worldchain', fastTransfer: true }, // BONUS World integration
  
  // Fast Transfer (destination seulement)
  AVALANCHE: { id: 43114, name: 'avalanche', fastTransfer: false },
  SONIC: { id: 146, name: 'sonic', fastTransfer: false }
};
```

### üöÄ Priorisation des Cha√Ænes
```typescript
// Ordre de pr√©f√©rence pour LeBonKoin
const CHAIN_PRIORITY = {
  1: 'BASE',        // Frais les plus bas
  2: 'ARBITRUM',    // L2 populaire
  3: 'WORLD_CHAIN', // Int√©gration World ID
  4: 'ETHEREUM',    // Cha√Æne principale
  5: 'LINEA',       // Alternative L2
  6: 'POLYGON',     // Support large
  7: 'AVALANCHE',   // Destination seulement
  8: 'SONIC'        // Innovation
};
```

## üîß IMPL√âMENTATION CCTP V2

### Configuration SDK
```typescript
// Installation et configuration
// npm install @circle-fin/cctp-sdk

import { CCTPSDKv2 } from '@circle-fin/cctp-sdk';

const cctpSDK = new CCTPSDKv2({
  environment: 'mainnet', // ou 'testnet'
  apiKey: process.env.CIRCLE_API_KEY,
  version: 'v2'
});
```

### Interface LeBonKoin Payment
```typescript
// Interface sp√©cialis√©e pour les paiements LeBonKoin
interface LeBonKoinPayment {
  // Donn√©es de base
  listingId: string;
  buyerId: string;        // World ID
  sellerId: string;       // World ID
  amount: string;         // Montant en USDC (6 d√©cimales)
  
  // Configuration CCTP V2
  sourceChain: keyof typeof LEBONKOIN_SUPPORTED_CHAINS;
  destinationChain: keyof typeof LEBONKOIN_SUPPORTED_CHAINS;
  transferType: 'fast' | 'standard';
  
  // LeBonKoin sp√©cifique
  escrowAddress: string;
  itemName: string;
  itemCategory: string;
  expectedDeliveryDays: number;
  
  // Hooks CCTP V2 (BONUS POINTS)
  hooks?: {
    preTransfer?: string;   // Adresse hook pr√©-transfert
    postTransfer?: string;  // Adresse hook post-transfert
  };
}
```

### Service CCTP V2 pour LeBonKoin
```typescript
// Service principal pour les paiements
class LeBonKoinCCTPService {
  private cctpSDK: CCTPSDKv2;
  
  constructor() {
    this.cctpSDK = new CCTPSDKv2({
      environment: process.env.NODE_ENV === 'production' ? 'mainnet' : 'testnet'
    });
  }
  
  // OBLIGATOIRE : Fast Transfer pour tous les paiements LeBonKoin
  async createFastPayment(payment: LeBonKoinPayment): Promise<string> {
    try {
      // Validation des cha√Ænes
      if (!this.isFastTransferSupported(payment.sourceChain, payment.destinationChain)) {
        throw new Error('Fast Transfer non support√© pour cette combinaison de cha√Ænes');
      }
      
      // Cr√©ation du transfert rapide
      const transfer = await this.cctpSDK.createFastTransfer({
        amount: payment.amount,
        sourceChain: payment.sourceChain,
        destinationChain: payment.destinationChain,
        recipient: payment.escrowAddress, // Fonds vont directement en escrow
        metadata: {
          listingId: payment.listingId,
          buyerId: payment.buyerId,
          sellerId: payment.sellerId,
          itemName: payment.itemName
        },
        hooks: payment.hooks // BONUS POINTS
      });
      
      return transfer.transactionId;
    } catch (error) {
      console.error('Erreur Fast Transfer:', error);
      throw new Error('Impossible de cr√©er le paiement rapide');
    }
  }
  
  // V√©rification support Fast Transfer
  private isFastTransferSupported(source: string, destination: string): boolean {
    const sourceChain = LEBONKOIN_SUPPORTED_CHAINS[source];
    const destChain = LEBONKOIN_SUPPORTED_CHAINS[destination];
    
    return sourceChain?.fastTransfer === true; // Source doit supporter Fast Transfer
  }
  
  // Monitoring des transferts
  async monitorTransfer(transactionId: string): Promise<TransferStatus> {
    const status = await this.cctpSDK.getTransferStatus(transactionId);
    
    return {
      id: transactionId,
      status: status.status,
      sourceChain: status.sourceChain,
      destinationChain: status.destinationChain,
      amount: status.amount,
      estimatedTime: status.estimatedCompletionTime,
      actualTime: status.completedAt
    };
  }
}
```

### Hooks CCTP V2 (BONUS POINTS)
```typescript
// Hooks pour automatiser les actions post-transfert
// R√©f√©rence : https://developers.circle.com/stablecoins/generic-message-passing#hooks

interface LeBonKoinHooks {
  // Hook post-transfert : Cr√©ation automatique de l'escrow
  postTransferHook: {
    contractAddress: string;
    functionSelector: string; // createEscrow(uint256,address,uint256,string)
    parameters: {
      listingId: string;
      seller: string;
      amount: string;
      itemName: string;
    };
  };
  
  // Hook pr√©-transfert : Validation de l'annonce
  preTransferHook?: {
    contractAddress: string;
    functionSelector: string; // validateListing(uint256)
    parameters: {
      listingId: string;
    };
  };
}

// Impl√©mentation des hooks
const createLeBonKoinHooks = (payment: LeBonKoinPayment): LeBonKoinHooks => {
  return {
    postTransferHook: {
      contractAddress: ESCROW_CONTRACT_ADDRESS,
      functionSelector: 'createEscrow(uint256,address,uint256,string)',
      parameters: {
        listingId: payment.listingId,
        seller: payment.sellerId,
        amount: payment.amount,
        itemName: payment.itemName
      }
    }
  };
};
```

### Composant React pour Paiement
```typescript
// Composant de paiement multichain
import { useCCTPPayment } from '@/hooks/useCCTPPayment';

const MultiChainPayment = ({ listing }: { listing: Listing }) => {
  const { createPayment, isLoading, error } = useCCTPPayment();
  const [selectedChain, setSelectedChain] = useState<string>('BASE');
  
  const handlePayment = async () => {
    try {
      const payment: LeBonKoinPayment = {
        listingId: listing.id,
        buyerId: user.worldId,
        sellerId: listing.sellerId,
        amount: listing.price,
        sourceChain: selectedChain,
        destinationChain: 'BASE', // Destination par d√©faut
        transferType: 'fast',
        escrowAddress: ESCROW_CONTRACT_ADDRESS,
        itemName: listing.title,
        itemCategory: listing.category,
        expectedDeliveryDays: 7,
        hooks: createLeBonKoinHooks(payment)
      };
      
      const transactionId = await createPayment(payment);
      
      // Redirection vers page de suivi
      router.push(`/payment/${transactionId}`);
    } catch (error) {
      console.error('Erreur paiement:', error);
    }
  };
  
  return (
    <div className="payment-container">
      <h3>Payer {listing.price} USDC</h3>
      
      {/* S√©lection de cha√Æne */}
      <ChainSelector
        chains={Object.keys(LEBONKOIN_SUPPORTED_CHAINS)}
        selected={selectedChain}
        onChange={setSelectedChain}
      />
      
      {/* Estimation du temps */}
      <div className="transfer-info">
        <p>Temps estim√©: 8-20 secondes</p>
        <p>Frais: {getFees(selectedChain)} USDC</p>
      </div>
      
      {/* Bouton de paiement */}
      <button 
        onClick={handlePayment}
        disabled={isLoading}
        className="pay-button"
      >
        {isLoading ? 'Paiement en cours...' : 'Payer maintenant'}
      </button>
    </div>
  );
};
```

## üö® R√àGLES DE S√âCURIT√â

### Validation Obligatoire
```typescript
// TOUJOURS valider avant transfert
const CCTP_SECURITY_CHECKLIST = {
  chainSupported: true,        // Cha√Æne support√©e par CCTP V2
  fastTransferAvailable: true, // Fast Transfer disponible
  amountValid: true,          // Montant > 0 et < limite
  escrowReady: true,          // Contrat escrow d√©ploy√©
  hooksValidated: true,       // Hooks test√©s et s√©curis√©s
  feesCovered: true          // Frais couverts par l'utilisateur
};
```

### Gestion d'Erreurs
```typescript
// Messages d'erreur sp√©cifiques
const CCTP_ERRORS = {
  CHAIN_NOT_SUPPORTED: 'Cette cha√Æne n\'est pas support√©e par LeBonKoin',
  FAST_TRANSFER_UNAVAILABLE: 'Transfert rapide non disponible, utiliser transfert standard',
  INSUFFICIENT_BALANCE: 'Solde USDC insuffisant pour ce paiement',
  ESCROW_FAILED: 'Impossible de cr√©er le d√©p√¥t de garantie',
  HOOK_EXECUTION_FAILED: '√âchec de l\'ex√©cution automatique post-transfert'
};
```

## üìä M√âTRIQUES DE SUCC√àS

### KPIs CCTP V2
- ‚úÖ 95% des paiements en Fast Transfer (< 30 secondes)
- ‚úÖ Support des 8 cha√Ænes CCTP V2
- ‚úÖ Utilisation des hooks pour 80% des paiements
- ‚úÖ Taux de r√©ussite des transferts > 99%

### Monitoring Obligatoire
```typescript
// Surveillance des performances
const monitorCCTPPerformance = {
  transferTimes: [], // Temps de transfert par cha√Æne
  successRates: {}, // Taux de r√©ussite par cha√Æne
  hookExecutions: {}, // Succ√®s des hooks
  userPreferences: {} // Pr√©f√©rences de cha√Æne des utilisateurs
};
```

## üîó RESSOURCES TECHNIQUES

- **CCTP V2 Getting Started** : [https://developers.circle.com/stablecoins/cctp-getting-started](https://developers.circle.com/stablecoins/cctp-getting-started)
- **CCTP V2 APIs** : [https://developers.circle.com/stablecoins/cctp-apis](https://developers.circle.com/stablecoins/cctp-apis)
- **CCTP V2 Hooks** : [https://developers.circle.com/stablecoins/generic-message-passing#hooks](https://developers.circle.com/stablecoins/generic-message-passing#hooks)
- **Circle Console** : [https://console.circle.com/signin](https://console.circle.com/signin)

---

**üéØ OBJECTIF FINAL** : Rendre les paiements LeBonKoin **instantan√©s** et **sans friction** sur toutes les cha√Ænes support√©es, avec une exp√©rience utilisateur transparente et s√©curis√©e.
