# üåç WORLD ECOSYSTEM - IDENTIT√â V√âRIFI√âE LEBONKOIN

## üéØ OBJECTIF WORLD INTEGRATION
Cr√©er un syst√®me de **confiance totale** sur LeBonKoin gr√¢ce √† l'identit√© v√©rifi√©e World ID, tout en pr√©servant l'**anonymat** des utilisateurs et en construisant une **Mini App World** native.

## üìã INT√âGRATIONS WORLD OBLIGATOIRES

### ‚úÖ World ID - Identit√© V√©rifi√©e Anonyme
```typescript
// OBLIGATOIRE : World ID pour tous les utilisateurs LeBonKoin
// R√©f√©rence : https://docs.world.org/

import { WorldIDWidget } from '@worldcoin/idkit';
import { verifyCloudProof } from '@worldcoin/idkit/api';

// Configuration World ID pour LeBonKoin
const WORLD_ID_CONFIG = {
  app_id: process.env.NEXT_PUBLIC_WORLD_APP_ID!,
  action: 'lebonkoin-user-verification',
  signal: '', // Sera rempli dynamiquement
  enableTelemetry: true,
  walletConnectProjectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID
};
```

### üè™ Mini App World - Application Native
```typescript
// OBLIGATOIRE : D√©velopper LeBonKoin comme Mini App World
// Structure Mini App World
const MINI_APP_CONFIG = {
  name: 'LeBonKoin',
  description: 'Marketplace d√©centralis√©e s√©curis√©e par World ID',
  version: '1.0.0',
  category: 'marketplace',
  permissions: [
    'world-id-verification',
    'profile-read',
    'transactions-read'
  ],
  supportedChains: ['world-chain', 'ethereum', 'base', 'arbitrum']
};
```

### üîó World Chain - Blockchain Optimis√©e
```typescript
// RECOMMAND√â : Utiliser World Chain pour les op√©rations principales
const WORLD_CHAIN_CONFIG = {
  chainId: 480,
  name: 'World Chain',
  nativeCurrency: {
    name: 'Ethereum',
    symbol: 'ETH',
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: ['https://worldchain-mainnet.g.alchemy.com/public']
    }
  },
  blockExplorers: {
    default: {
      name: 'World Chain Explorer',
      url: 'https://worldchain-mainnet.explorer.alchemy.com'
    }
  }
};
```

## üîß IMPL√âMENTATION WORLD ID

### Service World ID pour LeBonKoin
```typescript
// Service principal pour la v√©rification World ID
class LeBonKoinWorldIDService {
  private appId: string;
  
  constructor() {
    this.appId = process.env.NEXT_PUBLIC_WORLD_APP_ID!;
  }
  
  // OBLIGATOIRE : V√©rification World ID √† l'inscription
  async verifyUser(proof: any, signal: string): Promise<LeBonKoinUser> {
    try {
      // V√©rification du proof World ID
      const verifyRes = await verifyCloudProof(proof, this.appId, 'lebonkoin-user-verification', signal);
      
      if (verifyRes.success) {
        // Cr√©ation de l'utilisateur LeBonKoin
        const user: LeBonKoinUser = {
          worldId: proof.nullifier_hash, // Identifiant unique anonyme
          isVerified: true,
          reputation: 0,
          createdAt: new Date(),
          preferredChains: ['world-chain', 'base'],
          profile: {
            isAnonymous: true,
            canSell: true,
            canBuy: true,
            maxTransactionAmount: '1000' // USDC
          }
        };
        
        return user;
      } else {
        throw new Error('V√©rification World ID √©chou√©e');
      }
    } catch (error) {
      console.error('Erreur World ID:', error);
      throw new Error('Impossible de v√©rifier l\'identit√©');
    }
  }
  
  // Pr√©vention des actions multiples (m√™me utilisateur)
  async checkActionUniqueness(worldId: string, action: string): Promise<boolean> {
    // V√©rifier que l'utilisateur n'a pas d√©j√† effectu√© cette action
    const existingAction = await this.getActionHistory(worldId, action);
    return existingAction.length === 0;
  }
  
  // Syst√®me de r√©putation bas√© sur World ID
  async updateReputation(worldId: string, delta: number): Promise<number> {
    const user = await this.getUserByWorldId(worldId);
    const newReputation = Math.max(0, user.reputation + delta);
    
    await this.updateUser(worldId, { reputation: newReputation });
    return newReputation;
  }
}
```

### Composant World ID pour LeBonKoin
```typescript
// Composant d'inscription avec World ID
import { WorldIDWidget } from '@worldcoin/idkit';

const LeBonKoinRegistration = () => {
  const [isVerified, setIsVerified] = useState(false);
  const [user, setUser] = useState<LeBonKoinUser | null>(null);
  
  const handleWorldIDSuccess = async (proof: any) => {
    try {
      const worldIdService = new LeBonKoinWorldIDService();
      const verifiedUser = await worldIdService.verifyUser(proof, 'lebonkoin-registration');
      
      setUser(verifiedUser);
      setIsVerified(true);
      
      // Redirection vers la marketplace
      router.push('/marketplace');
    } catch (error) {
      console.error('Erreur v√©rification:', error);
    }
  };
  
  return (
    <div className="registration-container">
      <h2>Rejoindre LeBonKoin</h2>
      <p>V√©rifiez votre identit√© de mani√®re anonyme avec World ID</p>
      
      {!isVerified ? (
        <WorldIDWidget
          app_id={WORLD_ID_CONFIG.app_id}
          action="lebonkoin-user-verification"
          onSuccess={handleWorldIDSuccess}
          onError={(error) => console.error('World ID Error:', error)}
          signal="" // Signal vide pour inscription g√©n√©rale
        >
          {({ open }) => (
            <button onClick={open} className="world-id-button">
              V√©rifier avec World ID
            </button>
          )}
        </WorldIDWidget>
      ) : (
        <div className="verified-user">
          <p>‚úÖ Identit√© v√©rifi√©e !</p>
          <p>World ID: {user?.worldId.slice(0, 8)}...</p>
          <p>R√©putation: {user?.reputation}/100</p>
        </div>
      )}
    </div>
  );
};
```

### Actions Sp√©cifiques LeBonKoin avec World ID
```typescript
// Actions World ID sp√©cifiques √† LeBonKoin
const LEBONKOIN_WORLD_ACTIONS = {
  // Inscription utilisateur
  USER_REGISTRATION: {
    action: 'lebonkoin-user-verification',
    description: 'V√©rification d\'identit√© pour rejoindre LeBonKoin'
  },
  
  // Cr√©ation d'annonce (limite 1 par jour)
  CREATE_LISTING: {
    action: 'lebonkoin-create-listing',
    description: 'Cr√©er une annonce de vente',
    signal: (listingData: any) => JSON.stringify(listingData)
  },
  
  // Achat d'objet (pr√©vention des achats multiples)
  PURCHASE_ITEM: {
    action: 'lebonkoin-purchase-item',
    description: 'Acheter un objet',
    signal: (listingId: string) => `purchase-${listingId}`
  },
  
  // Signalement d'utilisateur
  REPORT_USER: {
    action: 'lebonkoin-report-user',
    description: 'Signaler un utilisateur',
    signal: (reportedUserId: string) => `report-${reportedUserId}`
  }
};

// Composant pour actions prot√©g√©es
const WorldIDProtectedAction = ({ 
  action, 
  signal, 
  onSuccess, 
  children 
}: {
  action: string;
  signal: string;
  onSuccess: (proof: any) => void;
  children: React.ReactNode;
}) => {
  return (
    <WorldIDWidget
      app_id={WORLD_ID_CONFIG.app_id}
      action={action}
      signal={signal}
      onSuccess={onSuccess}
      onError={(error) => console.error('World ID Error:', error)}
    >
      {({ open }) => (
        <div onClick={open}>
          {children}
        </div>
      )}
    </WorldIDWidget>
  );
};
```

## üè™ MINI APP WORLD

### Structure Mini App
```typescript
// Configuration Mini App LeBonKoin
const miniAppManifest = {
  name: 'LeBonKoin',
  short_name: 'LeBonKoin',
  description: 'Marketplace d√©centralis√©e s√©curis√©e par World ID',
  version: '1.0.0',
  icons: [
    {
      src: '/icons/lebonkoin-192.png',
      sizes: '192x192',
      type: 'image/png'
    }
  ],
  world_app: {
    category: 'marketplace',
    permissions: [
      'world-id-verification',
      'profile-read',
      'transactions-read'
    ],
    supported_chains: ['world-chain', 'ethereum', 'base'],
    features: [
      'escrow-payments',
      'reputation-system',
      'dispute-resolution'
    ]
  }
};
```

### Int√©gration World Chain
```typescript
// Configuration pour World Chain
const worldChainProvider = new ethers.providers.JsonRpcProvider(
  'https://worldchain-mainnet.g.alchemy.com/public'
);

// D√©ploiement prioritaire sur World Chain
const DEPLOYMENT_PRIORITY = {
  'world-chain': 1,    // Priorit√© maximale
  'base': 2,           // Alternative L2
  'ethereum': 3,       // Mainnet
  'arbitrum': 4        // Backup
};

// Contrats sp√©cialis√©s World Chain
const WORLD_CHAIN_CONTRACTS = {
  LeBonKoinEscrow: '0x...', // Contrat principal
  WorldIDVerifier: '0x...', // V√©rificateur World ID
  ReputationManager: '0x...' // Gestionnaire de r√©putation
};
```

## üö® R√àGLES DE S√âCURIT√â WORLD

### Validation Obligatoire
```typescript
// TOUJOURS v√©rifier World ID avant actions sensibles
const WORLD_SECURITY_CHECKLIST = {
  worldIdVerified: true,        // World ID v√©rifi√©
  actionUnique: true,          // Action unique (pas de double)
  signalValid: true,           // Signal valide pour l'action
  reputationSufficient: true,  // R√©putation suffisante
  chainSupported: true         // Cha√Æne support√©e par World
};
```

### Gestion des Erreurs
```typescript
// Messages d'erreur World ID
const WORLD_ERRORS = {
  NOT_VERIFIED: 'Vous devez v√©rifier votre identit√© avec World ID',
  ACTION_ALREADY_PERFORMED: 'Vous avez d√©j√† effectu√© cette action',
  INSUFFICIENT_REPUTATION: 'R√©putation insuffisante pour cette action',
  WORLD_ID_ERROR: 'Erreur de v√©rification World ID',
  MINI_APP_NOT_SUPPORTED: 'Cette fonctionnalit√© n√©cessite la Mini App World'
};
```

## üìä M√âTRIQUES DE SUCC√àS WORLD

### KPIs World Integration
- ‚úÖ 100% des utilisateurs v√©rifi√©s avec World ID
- ‚úÖ 0% de faux comptes d√©tect√©s
- ‚úÖ Mini App World fonctionnelle
- ‚úÖ Utilisation World Chain pour 60% des transactions

### Syst√®me de R√©putation
```typescript
// Calcul de r√©putation bas√© sur World ID
const calculateReputation = (user: LeBonKoinUser) => {
  let reputation = 0;
  
  // Bonus v√©rification World ID
  if (user.isVerified) reputation += 20;
  
  // Bonus anciennet√©
  const daysSinceRegistration = Math.floor(
    (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24)
  );
  reputation += Math.min(daysSinceRegistration, 30);
  
  // Bonus transactions r√©ussies
  reputation += user.successfulTransactions * 2;
  
  // Malus signalements
  reputation -= user.reports * 10;
  
  return Math.max(0, Math.min(100, reputation));
};
```

## üîó RESSOURCES TECHNIQUES

- **World Documentation** : [https://docs.world.org/](https://docs.world.org/)
- **World ID SDK** : Documentation compl√®te pour l'int√©gration
- **Mini App Guidelines** : Sp√©cifications pour les Mini Apps World
- **World Chain** : Documentation technique de la blockchain

---

**üéØ OBJECTIF FINAL** : Cr√©er la marketplace la plus **s√ªre** et **fiable** du Web3 gr√¢ce √† l'identit√© v√©rifi√©e World ID, tout en pr√©servant l'anonymat et la libert√© des utilisateurs.

**üö´ INTERDIT** : Projets de gambling, jeux de hasard, ou tout contenu contraire aux valeurs World.
